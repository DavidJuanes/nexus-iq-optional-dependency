/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id "org.sonatype.gradle.plugins.scan" version "2.3.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-validator:commons-validator:1.7'
    implementation 'org.apache.commons:commons-compress:1.21'
}

application {
    // Define the main class for the application.
    mainClass = 'nexus.iq.optional.dependency.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// configure jar task
jar {
    manifest {
        attributes(
                'Built-By'       : System.properties['user.name'],
                'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Created-By'     : "Gradle ${gradle.gradleVersion}",
                'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
                'Implementation-Title': System.getenv("BUILD_VERSION") ?: "0",
                'Implementation-Version': System.getenv("BUILD_NUMBER") ?: "0"
        )
    }
    archiveFileName = "fat-jar.jar"
    destinationDirectory = file("${buildDir}/libs")
    includeEmptyDirs false
    exclude('**/*.form','**/Makefile','test/**','com/shenick/diversifeye/verify/**')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
}
